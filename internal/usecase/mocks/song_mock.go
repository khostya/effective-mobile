// Code generated by MockGen. DO NOT EDIT.
// Source: ./mocks/song.go
//
// Generated by this command:
//
//	mockgen -source ./mocks/song.go -destination=./mocks/song_mock.go -package=mock_usecase
//

// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
	context "context"
	reflect "reflect"

	uuid "github.com/google/uuid"
	domain "github.com/khostya/effective-mobile/internal/domain"
	dto "github.com/khostya/effective-mobile/internal/dto"
	gomock "go.uber.org/mock/gomock"
)

// MocksongUseCase is a mock of songUseCase interface.
type MocksongUseCase struct {
	ctrl     *gomock.Controller
	recorder *MocksongUseCaseMockRecorder
	isgomock struct{}
}

// MocksongUseCaseMockRecorder is the mock recorder for MocksongUseCase.
type MocksongUseCaseMockRecorder struct {
	mock *MocksongUseCase
}

// NewMocksongUseCase creates a new mock instance.
func NewMocksongUseCase(ctrl *gomock.Controller) *MocksongUseCase {
	mock := &MocksongUseCase{ctrl: ctrl}
	mock.recorder = &MocksongUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MocksongUseCase) EXPECT() *MocksongUseCaseMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MocksongUseCase) Create(ctx context.Context, param dto.CreateSongParam) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, param)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MocksongUseCaseMockRecorder) Create(ctx, param any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MocksongUseCase)(nil).Create), ctx, param)
}

// DeleteByID mocks base method.
func (m *MocksongUseCase) DeleteByID(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByID", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByID indicates an expected call of DeleteByID.
func (mr *MocksongUseCaseMockRecorder) DeleteByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByID", reflect.TypeOf((*MocksongUseCase)(nil).DeleteByID), ctx, id)
}

// Get mocks base method.
func (m *MocksongUseCase) Get(ctx context.Context, param dto.GetSongsParam) ([]domain.Song, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, param)
	ret0, _ := ret[0].([]domain.Song)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MocksongUseCaseMockRecorder) Get(ctx, param any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MocksongUseCase)(nil).Get), ctx, param)
}

// GetByVerse mocks base method.
func (m *MocksongUseCase) GetByVerse(ctx context.Context, id uuid.UUID, page dto.Page) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByVerse", ctx, id, page)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByVerse indicates an expected call of GetByVerse.
func (mr *MocksongUseCaseMockRecorder) GetByVerse(ctx, id, page any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByVerse", reflect.TypeOf((*MocksongUseCase)(nil).GetByVerse), ctx, id, page)
}

// Update mocks base method.
func (m *MocksongUseCase) Update(ctx context.Context, param dto.UpdateSongParam) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, param)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MocksongUseCaseMockRecorder) Update(ctx, param any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MocksongUseCase)(nil).Update), ctx, param)
}
