// Code generated by MockGen. DO NOT EDIT.
// Source: ./mocks/api.go
//
// Generated by this command:
//
//	mockgen -source ./mocks/api.go -destination=./mocks/api_mock.go -package=mock_api
//

// Package mock_api is a generated GoMock package.
package mock_api

import (
	context "context"
	reflect "reflect"

	dto "github.com/khostya/effective-mobile/internal/dto"
	gomock "go.uber.org/mock/gomock"
)

// MocksongApi is a mock of songApi interface.
type MocksongApi struct {
	ctrl     *gomock.Controller
	recorder *MocksongApiMockRecorder
	isgomock struct{}
}

// MocksongApiMockRecorder is the mock recorder for MocksongApi.
type MocksongApiMockRecorder struct {
	mock *MocksongApi
}

// NewMocksongApi creates a new mock instance.
func NewMocksongApi(ctrl *gomock.Controller) *MocksongApi {
	mock := &MocksongApi{ctrl: ctrl}
	mock.recorder = &MocksongApiMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MocksongApi) EXPECT() *MocksongApiMockRecorder {
	return m.recorder
}

// GetInfo mocks base method.
func (m *MocksongApi) GetInfo(ctx context.Context, param dto.GetSongInfo) (*dto.SongDetail, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInfo", ctx, param)
	ret0, _ := ret[0].(*dto.SongDetail)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInfo indicates an expected call of GetInfo.
func (mr *MocksongApiMockRecorder) GetInfo(ctx, param any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInfo", reflect.TypeOf((*MocksongApi)(nil).GetInfo), ctx, param)
}
