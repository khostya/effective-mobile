// Code generated by MockGen. DO NOT EDIT.
// Source: ./mocks/song.go
//
// Generated by this command:
//
//	mockgen -source ./mocks/song.go -destination=./mocks/song_mock.go -package=mock_repository
//

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	reflect "reflect"

	uuid "github.com/google/uuid"
	domain "github.com/khostya/effective-mobile/internal/domain"
	dto "github.com/khostya/effective-mobile/internal/dto"
	gomock "go.uber.org/mock/gomock"
)

// MocksongRepo is a mock of songRepo interface.
type MocksongRepo struct {
	ctrl     *gomock.Controller
	recorder *MocksongRepoMockRecorder
	isgomock struct{}
}

// MocksongRepoMockRecorder is the mock recorder for MocksongRepo.
type MocksongRepoMockRecorder struct {
	mock *MocksongRepo
}

// NewMocksongRepo creates a new mock instance.
func NewMocksongRepo(ctrl *gomock.Controller) *MocksongRepo {
	mock := &MocksongRepo{ctrl: ctrl}
	mock.recorder = &MocksongRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MocksongRepo) EXPECT() *MocksongRepoMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MocksongRepo) Create(ctx context.Context, song domain.Song) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, song)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MocksongRepoMockRecorder) Create(ctx, song any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MocksongRepo)(nil).Create), ctx, song)
}

// Delete mocks base method.
func (m *MocksongRepo) Delete(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MocksongRepoMockRecorder) Delete(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MocksongRepo)(nil).Delete), ctx, id)
}

// Get mocks base method.
func (m *MocksongRepo) Get(ctx context.Context, param dto.GetSongsParam) ([]domain.Song, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, param)
	ret0, _ := ret[0].([]domain.Song)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MocksongRepoMockRecorder) Get(ctx, param any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MocksongRepo)(nil).Get), ctx, param)
}

// GetByID mocks base method.
func (m *MocksongRepo) GetByID(ctx context.Context, id uuid.UUID) (domain.Song, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(domain.Song)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MocksongRepoMockRecorder) GetByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MocksongRepo)(nil).GetByID), ctx, id)
}

// Update mocks base method.
func (m *MocksongRepo) Update(ctx context.Context, param dto.UpdateSongParam) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, param)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MocksongRepoMockRecorder) Update(ctx, param any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MocksongRepo)(nil).Update), ctx, param)
}
